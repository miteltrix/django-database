from datetime import datetime
from django.db import models

# Create your models here.
class CustomerModel(models.Model):
    name = models.CharField(max_length=127)
    vat_prefix = models.CharField(max_length=7, default='ATU')
    vat = models.CharField(max_length=31)
    city = models.CharField(max_length=31)
    phone = models.CharField(max_length=31)
    street = models.CharField(max_length=63)
    plz = models.PositiveIntegerField()
    present = models.BooleanField(default=True)
    class Meta:
        verbose_name = 'Kunde'
        verbose_name_plural = 'Kunden'
    def __str__(self):
        return self.name

class ProjectManagerModel(models.Model):
    name = models.CharField(max_length=127)
    title = models.CharField(max_length=7)
    present = models.BooleanField(default=True)
    class Meta:
        verbose_name = 'Projektleiterinnen'
        verbose_name_plural = 'Projektleitern'
    def __str__(self):
        return self.name

class ProjectModel(models.Model):
    name = models.CharField(max_length=255)
    start_date = models.DateField()
    end_date = models.DateField(blank=True, null=True)
    location = models.CharField(max_length=31)
    manager = models.ForeignKey('ProjectManagerModel', on_delete=models.PROTECT)
    customer = models.ForeignKey('CustomerModel', on_delete=models.PROTECT)
    project_id = models.CharField(max_length=255, blank=True, null=True)
    class Meta:
        verbose_name = 'Baustelle'
        verbose_name_plural = 'Baustellen'
    def __str__(self):
        return self.name

'''
#TODO Fix autogenerated fields
class InvoiceModel(models.Model):
    project = models.ForeignKey('ProjectModel', on_delete=models.PROTECT)
    year = models.PositiveSmallIntegerField(default=datetime.now().year)
    month = models.PositiveSmallIntegerField(default=datetime.now().month)
    id_seq = models.AutoField(unique=True, default=1) #(self, nowait=False), reset_value=new/month)
    is_final = models.BooleanField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    class Meta:
        unique_together = (('year', 'month', 'id_seq'),)
        verbose_name = 'Rechnung'
        verbose_name_plural = 'Rechnungen'
    #def __str__(self):
    #    return self.project
'''

class ServiceModel(models.Model):
    project = models.ForeignKey('ProjectModel', on_delete=models.PROTECT)
    volume = models.FloatField()
    price = models.FloatField()
    currency = models.CharField(max_length=7, default='EUR')
    PIECE = 0
    BLOB = 1
    LENGTH = 2
    AREA = 3
    TIME = 4
    UNIT_CHOICES = (
        (PIECE, 'Stk.'),
        (BLOB, 'PA'),
        (LENGTH, 'lfm'),
        (AREA, 'mÂ²'),
        (TIME, 'Std.'),
    )
    name = models.CharField(max_length=1023)
    unit = models.PositiveSmallIntegerField(choices=UNIT_CHOICES)
    class Meta:
       verbose_name = 'Leistung'
       verbose_name_plural = 'Leistungen'
    def __str__(self):
        unit = self.UNIT_CHOICES[self.unit]
        return f"{self.volume:.2f} {unit[1]}, {self.name} => Baustelle: {self.project}"


class Employees(models.Model):
    name = models.CharField(max_length=264)
    surname = models.CharField(max_length=264)
    born_on = models.DateField()
    ssn = models.CharField(max_length=10)
    rate = models.DecimalField(max_digits=6, decimal_places=2)
    nationality = models.CharField(max_length=264)
    class Meta:
      verbose_name = 'Mitarbeiterinnen'
      verbose_name_plural = 'Mitarbeiter'
    def __str__(self):
        return f"{self.name} {self.surname}"
